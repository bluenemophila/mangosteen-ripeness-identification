# -*- coding: utf-8 -*-
"""Tugas Akhir_InceptionV3_LR 0.0001

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ijL1lO--swDcNbKHogQbpIHpseTMN55w

# Identifikasi Kematangan Buah Manggis dengan CNN

### Connect to Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import some libraries to support the model running"""

import os
import shutil
import numpy as np
import seaborn as sns
import time
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam, SGD, RMSprop
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.layers import Dense, Flatten, BatchNormalization, Dropout
from tensorflow.keras.models import load_model
from google.colab import files
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import img_to_array

tf.random.set_seed(2023)

"""### Data Preparation"""

output_folder = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder"

# Calculating the amount of training data
train_folder = os.path.join(output_folder, "train")
num_train_samples = sum(len(files) for _, _, files in os.walk(train_folder))

# Counting the number of validation data
val_folder = os.path.join(output_folder, "valid")
num_val_samples = sum(len(files) for _, _, files in os.walk(val_folder))

# Display the number of training data and validation data
print("The amount of training data:", num_train_samples)
print("The amount of validation data:", num_val_samples)

kematangan1_train_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/train/1-remove-aug"
kematangan2_train_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/train/2-remove-aug"
kematangan3_train_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/train/3-remove-aug"
kematangan4_train_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/train/4-remove-aug"
kematangan5_train_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/train/5-remove-aug"

kematangan1_val_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/valid/1-remove-aug"
kematangan2_val_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/valid/2-remove-aug"
kematangan3_val_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/valid/3-remove-aug"
kematangan4_val_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/valid/4-remove-aug"
kematangan5_val_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/valid/5-remove-aug"

kematangan1_test_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/test/1-remove-aug"
kematangan2_test_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/test/2-remove-aug"
kematangan3_test_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/test/3-remove-aug"
kematangan4_test_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/test/4-remove-aug"
kematangan5_test_dir = "/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/test/5-remove-aug"

print('total training kematangan 1 images :', len(os.listdir(      kematangan1_train_dir ) ))
print('total training kematangan 2 images :', len(os.listdir(      kematangan2_train_dir ) ))
print('total training kematangan 3 images :', len(os.listdir(      kematangan3_train_dir ) ))
print('total training kematangan 4 images :', len(os.listdir(      kematangan4_train_dir ) ))
print('total training kematangan 5 images :', len(os.listdir(      kematangan5_train_dir ) ))

print('total validation kematangan 1 images :', len(os.listdir(      kematangan1_val_dir ) ))
print('total validation kematangan 2 images :', len(os.listdir(      kematangan2_val_dir ) ))
print('total validation kematangan 3 images :', len(os.listdir(      kematangan3_val_dir ) ))
print('total validation kematangan 4 images :', len(os.listdir(      kematangan4_val_dir ) ))
print('total validation kematangan 5 images :', len(os.listdir(      kematangan5_val_dir ) ))

print('total testing kematangan 1 images :', len(os.listdir(      kematangan1_test_dir ) ))
print('total testing kematangan 2 images :', len(os.listdir(      kematangan2_test_dir ) ))
print('total testing kematangan 3 images :', len(os.listdir(      kematangan3_test_dir ) ))
print('total testing kematangan 4 images :', len(os.listdir(      kematangan4_test_dir ) ))
print('total testing kematangan 5 images :', len(os.listdir(      kematangan5_test_dir ) ))

"""Menampilkan 4 gambar kematangan manggis secara acak."""

# Parameters for our graph; we'll output images in a 4x4 configuration
nrows = 2
ncols = 5

pic_index = 0 # Index for iterating over images

# Set up matplotlib fig, and size it to fit 4x4 pics
fig = plt.gcf()
pic_index += 4

# Kematangan 1
print("Sample Kematangan 1 image:")
next_kematangan1_pic = [os.path.join(kematangan1_train_dir, fname)
                         for fname in os.listdir(kematangan1_train_dir)[pic_index-2:pic_index]]
fig = plt.figure(figsize=(10, 10))

for i, img_path in enumerate(next_kematangan1_pic):
    # Set up subplot; subplot indices start at 1
    sp = plt.subplot(nrows, ncols, i + 1)
    sp.axis('Off') # Don't show axes (or gridlines)

    img = mpimg.imread(img_path)
    plt.imshow(img)

plt.show()

# Kematangan 2
print("Sample Kematangan 2 image:")
next_kematangan2_pic = [os.path.join(kematangan2_train_dir, fname)
                  for fname in os.listdir(kematangan2_train_dir)[pic_index-2:pic_index]]
fig = plt.figure(figsize=(10, 10))

for i, img_path in enumerate(next_kematangan2_pic):
    # Set up subplot; subplot indices start at 1
    sp = plt.subplot(nrows, ncols, i + 1)
    sp.axis('Off') # Don't show axes (or gridlines)

    img = mpimg.imread(img_path)
    plt.imshow(img)

plt.show()

# Kematangan 3
print("Sample Kematangan 3 image:")
next_kematangan3_pic = [os.path.join(kematangan3_train_dir, fname)
                  for fname in os.listdir(kematangan3_train_dir)[pic_index-2:pic_index]]
fig = plt.figure(figsize=(10, 10))

for i, img_path in enumerate(next_kematangan3_pic):
    # Set up subplot; subplot indices start at 1
    sp = plt.subplot(nrows, ncols, i + 1)
    sp.axis('Off') # Don't show axes (or gridlines)

    img = mpimg.imread(img_path)
    plt.imshow(img)

plt.show()

# Kematangan 4
print("Sample Kematangan 4 image:")
next_kematangan4_pic = [os.path.join(kematangan4_train_dir, fname)
                  for fname in os.listdir(kematangan4_train_dir)[pic_index-2:pic_index]]
fig = plt.figure(figsize=(10, 10))

for i, img_path in enumerate(next_kematangan4_pic):
    # Set up subplot; subplot indices start at 1
    sp = plt.subplot(nrows, ncols, i + 1)
    sp.axis('Off') # Don't show axes (or gridlines)

    img = mpimg.imread(img_path)
    plt.imshow(img)

plt.show()

# Kematangan 5
print("Sample Kematangan 5 image:")
next_kematangan5_pic = [os.path.join(kematangan5_train_dir, fname)
                  for fname in os.listdir(kematangan5_train_dir)[pic_index-2:pic_index]]
fig = plt.figure(figsize=(10, 10))

for i, img_path in enumerate(next_kematangan5_pic):
    # Set up subplot; subplot indices start at 1
    sp = plt.subplot(nrows, ncols, i + 1)
    sp.axis('Off') # Don't show axes (or gridlines)

    img = mpimg.imread(img_path)
    plt.imshow(img)

plt.show()

"""Menlakukan augmentasi pada gambar dengan menggunakan ImageDataGenerator untuk mempersiapkan gambar dalam analisis."""

Training_dir = '/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/train'
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=40,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest')


train_generator = train_datagen.flow_from_directory(Training_dir,
                                                    batch_size=24,
                                                    class_mode='categorical',
                                                    target_size=(150, 150))

Validation_dir = '/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/valid'
validation_datagen = ImageDataGenerator(rescale = 1/255.0)

validation_generator = validation_datagen.flow_from_directory(Validation_dir,
                                                              batch_size=24,
                                                              class_mode  = 'categorical',
                                                              target_size = (150, 150))

Testing_dir = '/content/drive/MyDrive/Skripsi/msgt6removebgcrop.v1i.folder/test'
test_datagen = ImageDataGenerator(rescale = 1/255.0)

test_generator = test_datagen.flow_from_directory(Testing_dir,
                                                              batch_size=24,
                                                              class_mode  = 'categorical',
                                                              target_size = (150, 150),
                                                  shuffle= False)

"""### Data Modeling"""

# Creating transfer learning with inceptionV3 model
pre_trained_model_kematangan = InceptionV3(input_shape = (150, 150, 3),
                                include_top = False,
                                weights = "imagenet")

# Set the pre-trained layer to be untrainable
for layer in pre_trained_model_kematangan.layers:
    layer.trainable = False

inputs3 = pre_trained_model_kematangan.input
x4 = tf.keras.layers.Flatten()(pre_trained_model_kematangan.output)
x4 = tf.keras.layers.Dense(512, activation='relu')(x4)
x4 = tf.keras.layers.BatchNormalization()(x4)
x4 = tf.keras.layers.Dropout(0.3)(x4)
x4 = tf.keras.layers.Dense(256, activation='relu')(x4)
x4 = tf.keras.layers.BatchNormalization()(x4)
x4 = tf.keras.layers.Dropout(0.1)(x4)
outputs3 = tf.keras.layers.Dense(5, activation='softmax')(x4)
model = tf.keras.Model(inputs=inputs3, outputs=outputs3)

model.summary()

# Create accuracy with adam optimizer and categorical_crossentropy

model.compile(optimizer = Adam(learning_rate=0.0001),
              loss = 'categorical_crossentropy',
              metrics = ['accuracy'])

"""### Training Model"""

# Setting up checkpoints to save the best models

sourcedata = "/content/drive/MyDrive/Skripsi/checkpoint_fix"

if not os.path.exists(sourcedata):  # Check if the directory already exists before creating it
    os.mkdir(sourcedata)

checkpoint = ModelCheckpoint(sourcedata, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')

start_time = time.time()
# Perform iterations
callbacks_list = [checkpoint]
history = model.fit(train_generator, validation_data=validation_generator, steps_per_epoch=50, epochs=100, callbacks=[callbacks_list])

# Calculates the time required in iterations
duration = time.time() - start_time
minutes = duration // 60
seconds = duration % 60
print("Run time : {:.0f}:{:.0f}".format(minutes, seconds))

"""### Plot accuracy and loss

Here, we are going to evaluate the results with plot the accuracy, validation accuray, loss and validation loss results of model training before
"""

#-----------------------------------------------------------
# Retrieve a list of list results on training and test data
# sets for each training epoch
#-----------------------------------------------------------
acc      = history.history[     'accuracy' ]
val_acc  = history.history[ 'val_accuracy' ]
loss     = history.history[    'loss' ]
val_loss = history.history['val_loss' ]

epochs   = range(len(acc)) # Get number of epochs

#------------------------------------------------
# Plot training and validation accuracy per epoch
#------------------------------------------------
plt.plot  ( epochs,     acc, label='Training')
plt.plot  ( epochs, val_acc, label='Validation')
plt.title ('Training and validation accuracy')
plt.legend()
plt.figure()

#------------------------------------------------
# Plot training and validation loss per epoch
#------------------------------------------------
plt.plot  ( epochs,     loss, label='Training')
plt.plot  ( epochs, val_loss, label='Validation')
plt.legend()
plt.title ('Training and validation loss'   )

"""### Load best model weight

Here, we load the weights from the previously saved model into the current model.
"""

model.load_weights('/content/drive/MyDrive/Skripsi/checkpoint_fix')

"""### Evaluate model accuracy

Evaluate the model against the model that has been made before.
"""

model.evaluate(test_generator)

import pandas as pd

accloss = pd.DataFrame(history.history)

accloss.to_csv('/content/drive/MyDrive/Skripsi/accloss.csv')

print(accloss)

from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from glob import glob
import matplotlib.cm as cm
from matplotlib.pyplot import imread, imshow, subplots, show

predictions = model.predict(test_generator)
predicted_classes =  np.argmax(predictions, axis=1)
true_classes = test_generator.classes
class_labels = list(test_generator.class_indices.keys())

print(predicted_classes)

fig,ax=plt.subplots(1,1,figsize=(14,7))
sns.heatmap(confusion_matrix(true_classes, predicted_classes),
            ax=ax,
            xticklabels=class_labels, yticklabels=class_labels,
            annot=True, #cmap=colors_green[::-1],
            alpha=0.7,
            linewidths=2)#,
            #linecolor=colors_dark[3] )
fig.text(s='Confusion Matrix',
         size=18, fontweight='bold', fontname='monospace', #color=colors_dark[1],
         y=0.92, x=0.28, alpha=0.8)
print(confusion_matrix(true_classes, predicted_classes))
plt.show()

report = classification_report(true_classes, predicted_classes, target_names=class_labels)
print(report)

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  path = fn
  img = image.load_img(path, target_size=(150,150))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  x /= 255.0
  prob = model.predict(x)
  classes = np.argmax(prob)

  if classes == 0:
    print("")
    print("------------------------------------------------------------")
    print("Buah manggis tingkat kematangan 1")
    print("Dapat dipasarkan ke Pasar Ekspor")
    print("Buah dapat disimpan selama 7 hari hingga matang sempurna")
    print("------------------------------------------------------------")


  elif classes == 1:
    print("")
    print("------------------------------------------------------------")
    print("Buah manggis tingkat kematangan 2")
    print("Dapat dipasarkan ke Pasar Ekspor")
    print("Buah dapat disimpan selama 5 hari hingga matang sempurna")
    print("------------------------------------------------------------")

  elif classes == 2:
    print("")
    print("------------------------------------------------------------")
    print("Buah manggis tingkat kematangan 3")
    print("Dapat dipasarkan ke Pasar Domestik Jauh")
    print("Buah dapat disimpan selama 3 hari hingga matang sempurna")
    print("------------------------------------------------------------")

  elif classes == 3:
    print("")
    print("------------------------------------------------------------")
    print("Buah manggis tingkat kematangan 4")
    print("Dapat dipasarkan ke Pasar Domestik Lokal")
    print("Buah dapat langsung dikonsumsi atau disimpan maksimal 3 hari")
    print("------------------------------------------------------------")

  elif classes == 4:
    print("")
    print("------------------------------------------------------------")
    print("Buah manggis tingkat kematangan 5")
    print("Dapat dipasarkan ke Pasar Domestik Lokal")
    print("Buah dapat langsung dikonsumsi")
    print("------------------------------------------------------------")

  else :
    print("")
    print("------------------------------------------------------------")
    print("Gambar bukan buah manggis")
    print("Mohon unggah gambar buah manggis!")
    print("------------------------------------------------------------")

